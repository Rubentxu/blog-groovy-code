@Library([
    'core-lib',
    'container-lib',
    'helm-lib',
    'maven-lib',
    'spinnaker-lib',
]) _

def url() {
    return scm.userRemoteConfigs.first().url.replace('/opt/repositories/remote/projects/', 'https://gitlab.gcp.mercadona.com/') as String
}
cdi.initialize(this)

pipeline {
    agent any
    environment {
        GIT_REPOSITORY_URL = url()
    }
    options {
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        disableResume()
        buildDiscarder(logRotator(numToKeepStr: '20'))
        ansiColor('xterm')
        skipDefaultCheckout true
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }
    stages {
        stage('Initialize Pipeline') {
            steps {
                script {
                    pipelineUtils.setCurrentBuildDescription("Version: '${params.CURRENT_VERSION}' | Env: '${params.CHOICE_ENV}' | GitRef: '${params.GIT_REFERENCE}'")
                    preview.validateParams('CURRENT_VERSION', 'GIT_REFERENCE')

                    gitTool.lightweightCheckoutInAgent(params.GIT_REPOSITORY_URL, params.GIT_REFERENCE, env.CONFIG_MANAGEMENT_GIT_CREDENTIAL_ID)

                    config([
                        defaultProfile: "TEST",
                        pipeline: [logLevel: 'INFO', appVersion: params.CURRENT_VERSION],
                    ])

                    mavenApplicationRelease.writeVersion(params.CURRENT_VERSION)
                    mavenApplicationRelease.build()
                    containerRelease.build()
                    containerRelease.publish()
                    helmRelease.build()
                    helmRelease.publish()
                    spinnaker.sendWebhook([
                        gitReference: params.GIT_REFERENCE,
                        environment: params.CHOICE_ENV,
                        version: params.CURRENT_VERSION
                    ])
                    artifacts.printPublishedArtifacts()
                }
            }
        }
    }
}

@Library([
        'core-lib',
        'maven-lib',
        'confluentplatform-lib',
        'jira-lib',
        'container-lib',
]) _

def url() {
    return scm.userRemoteConfigs.first().url.replace('/opt/repositories/remote/projects/', 'https://gitlab.gcp.mercadona.com/') as String
}

cdi.initialize(this)

pipeline {
    agent any
    environment {
        GIT_REPOSITORY_URL = url()
        BRANCH_NAME = 'master'
    }
    options {
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        disableResume()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        ansiColor('xterm')
        skipDefaultCheckout false
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }
    stages {
        stage('Initialize Pipeline') {
            steps {
                script {
                    config([
                            defaultProfile: 'TEST',
//                        defaultProfile: 'CORE',
                            CONFIG_MANAGEMENT_GIT_REFERENCE: 'feature/EXPLCICD-2972-Migraci√≥n_Kafka_desde_libreria_vieja',
                            pipeline: [
                                    logLevel: 'INFO',
                                    env: [
                                            M2_HOME: '/home/jenkins/.m2/',
                                            MAVEN_OPTS: '-Xms64M -Xmx768M -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts -Djavax.net.ssl.trustStorePassword=changeit -Dmaven.repo.local=/home/jenkins/.m2/',
                                            PATH: '/opt/cache/asdf-tools/shims:/home/jenkins/.asdf/bin:/home/jenkins/.local/bin:/home/jenkins/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
                                    ],
                            ],
                            asdf: [defaultToolVersionsFileDir: '/home/jenkins/'],
                    ])

                    when(is.mr()) {
                        release.validateMergeRequestTitle()
                    }

                    when(is.pushToMaster()) {
                        release.isReleaseCommit()
                    }
                    kafkaConnect.initialize()
                    when.all([is.pushToMaster(), workspace.checkWatchedFiles(false)]) {
                        containerRelease.build()
                        containerRelease.publish()
                        release.createRelease()
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                artifacts.deletePublishedArtifacts()
            }
        }
    }
}
